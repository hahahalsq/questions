一：1.不一样的变量声明：const和let，2.模板字符串，3.箭头函数，4.函数的参数默认值，可以给函数设置默认值，5.对象和数组解构，6.for...of与for...in ，for...of用来遍历一个迭代器，for...in用来遍历对象中的属性
二：Promise    构造函数接收两个函数作为参数，分别是resolve和reject。当异步操作执行成功后，会将异步操作结果作为参数传入resolve函数并执行，此时Promise对象状态从pending变为fulfilled;失败则会将异步操作的错误作为参数传入reject函数并执行，此时Promise对象状态从pending变为rejected

3.vue中v-if和v-show的区别
4.$nextTick
this.$nextTick()将回调延迟到下次DOM更新循环之后执行。在修改数据之后立即使用它，然后等待DOM更新。它跟全局方法Vue.nextTick一样，不同的是回调的this自动绑定到调用它的实例上。
5.es6新特性：
（1）默认参数（2）模板表达式（3）多行字符串（4）拆包表达式（5）改进的对象表达式（6）箭头函数（7）Promise（8）块级作用域的let和const（9）类（10）模块化
6.导航守卫：导航守卫又称路由守卫，实时监控路由跳转时的过程，在路由跳转的各个过程执行相应的操作，类似于生命周期函数。
全局路由一共分为三类：全局守卫，路由独享的守卫，组件内的守卫
（1）全局守卫一共有三种：router.beforeEach(全局前置守卫)、router.beforeResolve(全局解析守卫)、router.afterEach(全局后置守卫)
（2）路由独享守卫：独享守卫只有一种：beforeEnter，该守卫接收的参数与全局守卫是一样的，但该守卫只有其他路由跳转至配置有beforeEnter路由表信息时才生效。
（3）组件内守卫一共有三种：beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave。这三者分别对应：进入该路由时执行、该路由中参数改变时执行、离开该路由时执行。


1.介绍下css的盒子模型
 （0）盒模型：内容content，填充padding，边界margin，边框border
 （1）有两种，ie盒子模型。标准w3c盒子模型
 （2）ie的content部分包含border和padding
 
 w3c标准盒子模型：content，padding，border，margin，其中content并不包含其他内容
 ie盒子模型：content，padding，border，margin，其中content包含padding和border
 
 
 2.列举出display都得值，并说明他们的作用
  block：像块类元素一样显示
  inline：缺省值，像行内元素类型一样显示
  inline-block：像行内元素一样显示，但内容像块类元素一样显示
  list-item: 像块类型元素一样显示，并添加样式列表标记
  

3.vue生命周期
beforeCreate， created， beforeMount， mounted， beforeUpdate， updated，beforeDestory， destroyed

4.Mvvm的理解
model 数据模型
view   ui组件
viewModel   监听模型数据的改变和控制视图行为，交互，同步view和model


5.vuex是什么
只用来读取的状态集中放在store中；改变状态的方式是提交mutations，这是个同步的事物；异步逻辑封装在action中

vuex是专门为vue开发的数据状态管理模式，组件之间数据状态共享

如果需要修改store中的值得唯一的方法就是提交mutation来修改。



6.dom渲染在哪个周期中完成

第一次页面加载会触发哪几个钩子：beforeCreate,created,beforeMount,mounted

mounted


7.如何获取某个dom节点
getElementById， getElementByTagName


8.父子组件参数传递：
（1）父组件传给子组件：子组件通过props方法接受数据
（2）子组件传给父组件：$emit方法传递参数
（3）兄弟组件之间传值，用vuex，或者子组件传递给父组件，然后父组件再传递给子组件


9.vue和angular的区别
相同点：都支持指令：内置指令和自定义指令；都支持过滤器，都支持双向数据绑定，都不支持低端浏览器
不同点：angular学习成本高，vue成本低

10.css只在当前组件中起作用
在style标签中写入scoped

11.v-if和v-show的区别
v-if是否编译渲染，v-show为是否展示和隐藏

12.vue的常用指令
v-if，v-show，v-else，v-for，v-bind，v-on


13.js原型链
函数function才有prototype属性，对象拥有  __proto__  
prototype是函数才有的属性， __proto__是每个对象都有的属性


14.闭包
变量的作用域两种： 全局变量和局部变量
js：函数内部可以直接读取全局变量，但是在函数外部无法读取函数内部的局部变量。
有时候为了获取函数内部的局部变量，就需要在函数内部再定义一个函数，就是闭包

15. vue如何自定义一个过滤器,过滤器

（1）使用过滤器进行渲染数据
（2）过滤器不能改变真正的数据，只是改变渲染的结果，并返回过滤后的版本
（3）过滤器可以尽可能的保护api响应的干净
（4）使用管道符号（|）对过滤器进行串联
<div id="app">
     <input type="text" v-model="msg" />
     {{msg| capitalize }}
</div>

var vm=new Vue({
    el:"#app",
    data:{
        msg:''
    },
    filters: {
      capitalize: function (value) {
        if (!value) return ''
        value = value.toString()
        return value.charAt(0).toUpperCase() + value.slice(1)
      }
    }
})

16.computed是一个计算属性，类似于过滤器，对绑定到view的数据进行处理
watch是一个观察的动作

17.vue实现数据双向绑定主要是：采用数据劫持结合发布者-订阅者模式的方法，通过object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。

（1）实现一个数据监听器Observer,能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者。
（2）实现一个指令解析器Compile，对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数
（3）实现一个Watcher，作为连接Observer和Compile的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数



18.display:none 与 visibility:hidden的区别
display:none不显示对应的元素，在文档布局中不再分配空间
visibility:hidden隐藏对应元素，在文档布局中仍保留原来的空间


19.响应式设计：
响应式网站设计是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本。基本原理是通过媒体查询检测不同的设备屏幕尺寸做处理。页面头部必须有meta声明的 viewport


20：如何让谷歌浏览器支持小于12px的文字？
通过缩放进行支持。 font-size:10px; -webkit-transform:scale(0.8);

21：如何优化SPA应用的首屏加载速度慢的问题：
（1）将公用的JS库通过script标签外部引入，减小app.bundel的大小，让浏览器并行下载资源文件，提高下载速度；
（2）在配置路由时，页面和组件使用懒加载的方式引入，进一步缩小app.bundel的体积，在调用某个组件时再加载对应的js文件；
（3）加一个首屏loading图，提升用户体验；

22：vue等单页面应用及其优缺点
（1）优点：
vue的目标是通过尽可能简单的api实现响应的数据绑定和组合的视图组件，核心是一个相应的数据绑定系统。mvvm、数据驱动、组件化、轻量、简洁、高效、快速、模块友好。
（2）缺点：
不支持低版本的浏览器，最低只支持到IE9；不利于SEO的优化（如果要支持SEO，建议通过服务端来进行渲染组件）；第一次加载首页耗时相对长一些；不可以使用浏览器的导航按钮需要自行实现前进、后退。


23：是否了解函数柯里化：
函数柯里化是指将多变量函数拆解成单变量的多个函数的依次调用，可以从高元函数动态的生成批量的低元的函数。

24：请说出三种减少页面加载时间的方法（加载时间指感知时间或者实际加载时间）
（1）减少http请求（合并文件、合并图片）
（2）优化图片文件，减小其尺寸，特别是缩略图，一定要按尺寸生成缩略图然后调用，不要在网页中用resize方法实现；
（3）压缩javascripe、css代码：一般js、css文件中存在大量的空格，换行，注释，将这些内容进行压缩删减。

25：如何实现浏览器内多个标签页之间的通信？
（1）使用lo9calstorage，localstorage是浏览器多个标签共用的存储空间，所以可以用来实现多标签之间的通信；
（2）websocket通讯，websocket全双工通信，可以实现多个标签页之间的通信；
（3）定时器setInterval+cookie实现


26：请描述下cookies,sessionStorage和localStorage的区别：
相同点：都存储在客户端
不同点：
（1）存储大小
cookie数据大小不能超过4K，sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。
（2）有效时间
localStorage存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；
sessionStorage数据在当前浏览器窗口关闭后自动删除；
cookie设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭；
（3）数据与服务器之间的交互方式
cookie的数据会自动的传递到服务器，服务器端也可以写cookie到客户端
sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存


27.从敲入url到渲染完成的整个过程，包括DOM构建的过程，详细描述
（1）输入URL，浏览器根据域名寻找IP地址
（2）浏览器发送一个HTTP请求给服务器，如果服务器返回以301之类的重定向，浏览器根据相应头中的location再次发送请求
（3）服务器接收请求，处理请求生成html代码，返回给浏览器，这时的html页面代码可能是经过压缩的
（4）浏览器接收服务器响应结果，如果有压缩则首先进行解压处理
（5）浏览器开始显示HTML
（6）浏览器发送请求，以获取嵌入在HTML中的对象。在浏览器显示HTML时，它会注意到需要获取其他地址内容的标签
同时浏览器页面渲染同时进行：
（1）解析HTML
（2）构建DOM树
（3）DOM树与CSS样式进行附着构造呈现树
（4）布局
（5）绘制


28. javascript typeof返回的数据类型有哪些
object，string，undefined，number，function，boolean

29.pop，push，unshift，shift
pop() 尾部删除
push() 尾部插入
unshift() 头部插入
shift() 头部删除

30. == 和 === 的区别
前者会自动转换类型，后者不会自动转换类型

31.js严格模式
use strict
消除js一些不合理的用法，消除代码运行的一些不安全之处，增加运行速度
（1）变量必须声明
（2）对象不能出现重复属性名
（3）arguments改变，不会影响函数参数
（4）eval，arguments变为关键字，不能作为变量名
（5）不允许使用with
（6）不用call，apply，bind改变this指向，一般函数调用指向null

32.http的常用状态码：
（1）200：正常，表示一切正常，返回的是正常请求结果
（2）302/307临时重定向，表示请求的文档，已被临时移动到别处
（3）304未修改，调用缓存的数据
（4）403服务器拒绝客户请求
（5）404服务器不存在客户想要找的资源
（6）500服务器内部错误

33.如何阻止事件冒泡和默认事件
（1）阻止事件冒泡：
IE9+/FF/Chrome ： e.stopPropagation();
window.event.cancelBubble = true;     // ie9之前
（2）阻止默认行为：
IE9之前：window.event.returnValue = false;
IE9+/FF/Chrome:    e.preventDefault();

34.请描述事件冒泡机制
W3C在DOM2中添加了一个事件模型，DOM事件流存在三个阶段，事件捕获，目标阶段，冒泡阶段。也就是当事件触发的时候，浏览器会从根节点开始，由外到内的进行事件传播，直到目标元素，如果在此捕获阶段绑定事件，都会触发。然后从目标元素，事件又会沿着当前元素的包含关系，由内而外的传递，每一级都可以感知到事件触发。

35.swiper.js在loop模式下点击事件的bug
描述：swiper在loop状态，第一页往前翻的那一页，以及最后一页往后翻的那一页点击跳转链接无效
原因：loop模式下，swiper插件会复制第一个swipe和最后一个swipe，即存在 n+2 个swipe，由于多出的两个swipe是由插件生成的dom，并非虚拟dom，所以绑定的click事件并不会绑定到这两个swipe上去。
解决：不在dom上绑定click事件，使用swipe的onclick回调函数可以解决了。

36.angular的数据绑定采用什么机制？详述原理
脏检查机制
双向数据绑定是AngularJS的核心机制之一。当view中有任何数据变化时，会更新到model，当model中数据有变化时，view也会同步更新，这需要一个监控。

原理就是，Angular在scope模型上设置了一个监听队列，用来监听数据变化并更新view。每次绑定一个东西到view上时AngularJS就会往$watch队列里插入一条$watch,用来检测它监视的model里是否有变化的东西。当浏览器接收到可以被angular context处理的事件时，$digest 循环就会被触发，遍历所有的$watch，最后更新dom。

37.angular 的缺点有哪些？
（1）强约束，导致学习成本高，对前端不友好
（2）不利于SEO，因为所有内容都是动态获取并渲染生成的，搜索引擎没法爬取
（3）性能问题，作为MVVM框架，因为实现了数据的双向绑定，对于大数组、复杂对象会存在性能问题。


38.移动页面适配：
（1）百分比适配：用百分比做适配的方法是子元素相对于父元素的百分之多少
（2）用rem来做适配：rem相对单位，根据根节点html的字体大小来计算，css3新加属性，chrome/firefox/IE9+都支持。
rem是相对尺寸单位，rem是将根节点html的font-size的值作为整个页面的基准尺寸，计算如下：
元素的rem尺寸 = 元素的psd稿测量的像素尺寸/动态设置的html标签的font-size值


39.JSON的深拷贝
引用数据类型-名存在栈内存中，值存在于堆内存中，但是栈内存会提供一个引用的地址指向堆内存中的值。
JSON.parse(JSON.stringify(json));这样可以实现对象的简易深拷贝

40.行内元素和块级元素
块级元素:总是在新行上开始，高度、行高以及外边距和内边距都可控制，宽度缺省是它的容器的100%，除非设定一个宽度，它可以容纳内联元素和其他块元素。
行内元素：和其他元素都在一行上，高，行高及外边距和内边距不可改变，宽度就是它的文字或图片的宽度，不可改变，内联元素只能容纳文本或者其他内联元素。

41.Vue.js中watch监听
watch的一个特点是，最初绑定的时候不会执行，要等到firstName改变时才执行监听计算。

watch:{
	firstName:{
		handler(newName,oldName){
			this.fullName = newName + '' + 'haha';
		},
		immediate:true,       // 代表在watch里声明了firstName这个方法后立即先去执行handler方法
		deep：false，         // 默认值是false，代表是否深度监听，deep的意思就是深入观察，监听器会一层层的往下遍历，给对象的所有属性都加上这个监听器。
	}
}

42.vue中 methods，watch和compute的区别与联系
一，作用机制：
（1）watch和computed都是以Vue的依赖追踪机制为基础的，它们都试图处理这样一件事：当某一个数据发生变化的时候，所有依赖这个数据的相关数据自动发生变化，也就是调用相关的函数去实现数据的变动。
（2）对methods：methods里面定义的函数，是需要主动调用的，而和watch和computed相关的函数，会自动调用，完成我们希望完成的作用。
二，从性质上看：
（1）methods里面定义的是函数，需要去调用它
（2）computed是计算属性，事实上和data对象里的数据属性是同一类
三，watch和computed区别
（1）首先它们都是以Vue的依赖追踪机制为基础的，它们的共同点是：都是希望在依赖数据发生改变的时候，被依赖的数据根据预先定义好的函数，发生‘自动’的变化
（2）但是watch和computed也有明显不同的地方：watch擅长处理的场景:一个数据影响多个数据，computed擅长处理的场景：一个数据受多个数据影响。

43.css flex 弹性布局，多个div自动换行
   display:flex  flex-flow:row wrap  
   
44.正则语法规则
   [xyz]匹配任何一个包含的字符
   [^xyz]否定字符集，匹配未包含的字符
   \d 匹配数字
   \D 匹配非数字
   
45. CSS3 box-shadow属性
语法： box-shadow: h-shadow v-shadow blur spread color inset;
h-shadow: 必需，水平阴影的位置，允许负值。正值代表向右偏，负值代表向左偏
v-shadow: 必需，垂直阴影的位置，允许负值。正值代表向下偏，负值代表向上偏
blur：可选，模糊距离
spread：可选，阴影的尺寸
color：可选，阴影的颜色
inset：可选，将外部阴影(outset)改为内部阴影
box-shadow: 0 4px 8px 0 #888888;


46.vuex
1.state 是vuex中的公共的状态，state看作是所有组件的data，用于保存所有组件的公共数据
  通过$方法赋值    {{$store.state.count}}
  
2.Getters属性理解为所有组件的computed属性，也就是计算属性。vue官方文档也是说可以将getter理解为store的计算属性，getters的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。
  getters可以看作是获取数据之前进行的一种再编辑，相当于对数据的一个过滤和加工。可以看作store.js的计算属性。


3.Mutations：理解为store中的methods，mutations对象中保存着更改数据的回调函数，该函数名官方规定叫type，第一个参数是state，第二个参数是payload，也就是自定义的参数。
  $store.commit()  传递commit的方法
  $store.commit('add',10)
  $store.commit('reduce')
  
4.Actions，actions类似于mutations，不同在于：
-actions提交的是mutations而不是直接变更状态
-actions中可以包含异步操作，mutations中绝对不允许出现异步
-actions中的回调函数的第一个参数是context，是一个与store实例具有相同属性和方法的对象

actions和之前讲的mutations功能基本一样，不同点是，actions是异步的改变state状态，而mutations是同步改变状态

5.modules：由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store对象就有可能变得相当臃肿。为了解决以上问题，Vuex允许我们将store分割成模块（module）。每个module模块拥有自己的state，mutation，action，getter，甚至是嵌套子模块——从上至下进行同样方式的分割。



47.vue-router 传参
(1)query方式传参和接收参数
this.$router.push({
	path:'/xxx'
	query:{
		id:id
	}
})
this.$router.query.id
(2)params方式传参和接收参数
this.$router.push({
	name:'xxx'
	params:{
		id:id
	}
})
this.$route.params.id
注意：params传参，push里只能是 name:'xxx'，不能是path:'/xxx'，因为params只能用name来引入路由，如果这里写成了path，接收参数页面会是undefined


48.left与top
left与top是需要在absolute：position的条件下才可以起作用
left与top的值是相对于屏幕的距离，因为已经是绝对定位了，脱离了文档流，所以是相对屏幕的距离来进行判断对应的位置来确定


49.js对象的深度拷贝
JSON.parse(JSON.stringify(person))
但是这种简单粗暴的方法有其局限性。当值为 undefined，function，symbol会在转换过程中被忽略。。。所以，对象值有这三种的话用这种方法会导致属性丢失。


50.vue-router路由    路由嵌套和参数传递
传参的两种形式：
（a）查询字符串：login?name=tom&pwd=123
		{{$route.query}}
（b）rest风格url：regist/alice/456
		{{$route.params}}


51.js基本有5种简单数据类型：String,Number,Boolean,Null,undefined,一种复杂的数据类型Object。将其他数据类型转换为String类型，可以使用String()和toString()。这两个方法的区别是String()可以转任何类型，而toString()方法不能转Null，undefined两种类型。


52.栈内存和堆内存
(1)基础数据类型是指存放在栈中的简单数据段，数据大小确定，内存空间大小可以分配，它们是直接按值存放的，可以直接按值访问。
(2)引用数据类型是指存放在堆内存中的对象，每个空间大小不一样，要根据情况进行特定的配置。引用类型是存放在堆内存中的对象，变量其实是保存在栈内存中的一个指针（保存的是堆内存中的引用地址），这个指针指向堆内存。
引用类型数据在栈内存中保存的实际上是对象在堆内存中的引用地址。通过这个引用地质可以快速查找到保存在堆内存中的对象。
var obj1 = new Object();
var obj2 = obj1;
obj2.name = 'name';
console.log(obj1.name);        // name
(3)浅拷贝与深拷贝
在定义一个数组或对象时，变量存放的往往只是一个地址。当我们使用对象拷贝时，如果属性是对象或数组时，这时候我们传递的也只是一个地址。因此子对象在访问该属性时，会根据地址回溯到父对象指向的堆内存中，即父子对象发生了关联，两者的属性值会指向同一内存空间

53.-webkit-device-pixel-ratio:2 
DPI(DPR) stands for Dots Per Inch which technically means printer dots per inch
这个参数实际上量化了屏幕的物理分辨率和显示清晰度，比如iphone的DPR就是2，比一般的手机都要高，iphoneX的DPR是3

54.跨域相关问题
(1)跨域是指从一个域名的网页去请求另一个域名的资源。比如从www.baidu.com 页面去请求www.google.com的资源。它是由浏览器的同源策略造成的，是浏览器对javascript添加的安全限制。跨域的严格一点的定义是：只要协议、域名、端口有任何一个不同的，就被当作是跨域


55.iphoneX以及之后系列html页面适配问题
1.iphoneX 系列适配：
@media only screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) {
    /* 这代表IPX */
    /* 目前这种设备像素比 和 尺寸是很“奇葩”、特殊的，基本可以确定是 IPX */
    .detailBut{
        height: 87px !important;
        padding-bottom:34px;
    }
    .holdBut{
        height:83px !important;
        padding-bottom: 34px;
    }
}
2.iphoneXr，iphoneXs，iphoneXs max ，iphone11等系列，都按照iphoneX系列的适配进行，只不过倍率是2倍或者3倍进行分别适配：
@media only screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 2) {
    /* 这代表IPX */
    /* 目前这种设备像素比 和 尺寸是很“奇葩”、特殊的，基本可以确定是 IPX */
    .detailBut{
        height: 87px !important;
        padding-bottom:34px;
    }
    .holdBut{
        height:83px !important;
        padding-bottom: 34px;
    }
}

56.html弹出框
遮罩层样式
.class{
    position: fixed;
    width: 100%;
    height:100%;
    top: 50%;
    left: 50%;
    background: rgba(0,0,0,0.5);
    z-index: 2;
    -webkit-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    -o-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
    border:1px solid #999999;
    border-radius: 5px;
}

57.获取当前完整的url路径
    var absurl = $location.absUrl();
    http://1.2.3.4:8080/#/homePage?id=10&a=100
获取当前url路径(当前url#后面的内容，包括参数和哈希值)
    var url = $location.url();
    /homePage?id=10&a=100
获取当前url的子路径(也就是当前url#后面的内容，不包括参数)
    var url = $location.path();
    /homePage
    ----------------------------------------------
    1、window.location.href(设置或获取整个 URL 为字符串)
    var test = window.location.href;
    alert(test);
    返回：http://i.cnblogs.com/EditPosts.aspx?opt=1
    2、window.location.protocol(设置或获取 URL 的协议部分)
    var test = window.location.protocol;
    alert(test);
    返回：http:
    3、window.location.host(设置或获取 URL 的主机部分)
    var test = window.location.host;
    alert(test);
    返回：i.cnblogs.com
    4、window.location.port(设置或获取与 URL 关联的端口号码)
    var test = window.location.port;
    alert(test);
    返回：空字符(如果采用默认的80端口(update:即使添加了:80)，那么返回值并不是默认的80而是空字符)
    5、window.location.pathname(设置或获取与 URL 的路径部分（就是文件地址）)
    var test = window.location.pathname;
    alert(test);
    返回：/EditPosts.aspx
    6、window.location.search(设置或获取 href 属性中跟在问号后面的部分)
    var test = window.location.search;
    alert(test);
    返回：?opt=1
PS：获得查询（参数）部分，除了给动态语言赋值以外，我们同样可以给静态页面，并使用javascript来获得相信应的参数值。
    7、window.location.hash(设置或获取 href 属性中在井号“#”后面的分段)
    var test = window.location.hash;
    alert(test);
    返回：空字符(因为url中没有)
    8、split 拆分法
    首先获取到url，然后根据split的方法，切割url，获取到参数的值

58.js跳转到指定的页面
    1.window.location.href="b.html"
    2.window.history.back(-1)
    3.window.navigate("b.html")
    4.self.location='b.html'
    5.top.location='b.html'

59.cookie,session,localStorage区别：
cookie的主要内容包括：名字，值，过期时间，路径和域。若不设置时间，则表示这个cookie的声明周期为浏览器会话期间，关闭浏览器窗口，cookie就会消失。这种声明期为浏览器会话期的cookie被称为会话cookie。
共同点：都是保存在浏览器端、且同源的
区别：
（1）cookie数据始终在同源的http请求中携带，即cookie在浏览器和服务器间来回传递，而sessionStorage和localStorage不会自动把数据发送给服务器，仅在本地保存。cookie数据还有路径path的概念，可以限制cookie只属于某个路径下
（2）存储大小限制也不同，cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数，比如会话标识。sessionStorage和localStorage虽然也有存储大小限制，但比cookie大得多，可以达到5M或更大
（3）数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭之前有效；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie：只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭
（4）作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localstorage在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。


60.sessionStorage与页面js数据对象的区别
页面中一般的js对象的生存期仅在当前页面有效，因此刷新页面或转到另一页面这样的重新加载页面的情况，数据就不存在了。而sessionStorage只要同源的同窗口中，刷新页面或进入同源的不同页面，数据始终存在，也就是说只要浏览器不关闭，数据仍然存在。

61.css自定义属性
一：全局
:root{        // 此处的root是固定的
    --them-color:blue;       // 自定义属性时以 --开头，告诉浏览器这是自定义的
}
使用：
.div{
    background-color:var(--them-color);
}
二：局部
.foo{
    --them-color:yellow;
}
.div{
    color:var(--them-color);
}
<div class="foo div">12345</div>


62.博客中增加人物动画特效的代码

<script src="https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css"/>
<script src="https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/autoload.js"></script>

63.dom中的事件处理程序
（1）DOM0级事件处理程序，在标签内之间增加事件处理属性
    <button onclick="hello()">dom0级</button>
    function hello(){alert('这是一个dom0级事件')}
（2）DOM2级事件处理程序，定义两种方法：addEventListener 和 removeEventListener,分别实现增加和删除事件处理程序的操作。这两种方法都接受三个参数：事件类型，事件函数，true/false，其中第三个参数：true代表事件捕获阶段，false代表事件冒泡阶段
    document.getElementById('bnt2').addEventListener('click',function(){
        alert
	})


64.浏览器兼容性问题
1.不同浏览器的标签默认的外补丁和内补丁不同
问题：随便写几个标签，不加样式控制的情况下，各自的marin和padding差异较大
概率：100%
解决：css中  *{margin:0;padding:0}
2.块属性标签float后，又有横行的margin情况下，在IE6显示margin比设置的大
问题：常见症状是IE6中后面的一块被顶到下一行
概率：90%
解决：在float的标签样式控制中加入display:inline;将其转化为行内属性
3.图片默认有间距
问题：几个img标签放在一起的时候，有些浏览器会有默认的间距，加了问题1中的通配符也不起作用
概率：20%
解决：使用float属性为img布局，因为img标签是行内属性标签，所以只要不超出容器宽度，img标签都会排在一行里，但是部分浏览器的img标签之间会有个间距。去掉这个间距使用float是正道
4.让IE7 IE8支持css3 background-size属性
由于background-size是css3新增的属性，所以ie低版本自然就不支持。
5.键盘事件keyCode兼容性写法
var inp = document.getElementById('inp')
var result = document.getElementById('result')

function getKeyCode(e) {
  e = e ? e : (window.event ? window.event : "")
  return e.keyCode ? e.keyCode : e.which
}

inp.onkeypress = function(e) {
  result.innerHTML = getKeyCode(e)
}
6.求窗口大小的兼容写法
// 浏览器窗口可视区域大小（不包括工具栏和滚动条等边线）
// 1600 * 525
var client_w = document.documentElement.clientWidth || document.body.clientWidth;
var client_h = document.documentElement.clientHeight || document.body.clientHeight;

// 网页内容实际宽高（包括工具栏和滚动条等边线）
// 1600 * 8
var scroll_w = document.documentElement.scrollWidth || document.body.scrollWidth;
var scroll_h = document.documentElement.scrollHeight || document.body.scrollHeight;

// 网页内容实际宽高 (不包括工具栏和滚动条等边线）
// 1600 * 8
var offset_w = document.documentElement.offsetWidth || document.body.offsetWidth;
var offset_h = document.documentElement.offsetHeight || document.body.offsetHeight;

// 滚动的高度
var scroll_Top = document.documentElement.scrollTop||document.body.scrollTop;


65.http和https的区别
https协议需要到ca申请证书，一般免费证书很少，需要交费
http是超文本传输协议，信息是明文传输，https则具有安全性的ssl加密传输协议
http和https使用的是完全不同的连接方式用的端口也不一样，前者是80，后者是443
http的连接很简单，是无状态的
https协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全

66.CSS3新特性
1.选择器
(1)E:last-child 匹配父元素的最后一个子元素E。
(2)E:nth-child(n)匹配父元素的第n个子元素E。
(3)E:nth-last-child(n) CSS3 匹配父元素的倒数第n个子元素E。
2.@Font-face特性
font-face可以用来加载字体样式，而且它还能够加载服务器端的字体文件，让客户端显示客户端所没有安装的字体
3.圆角：border-radius:15px;
4.转换和变形
5.css3伸缩布局盒模型（弹性盒），弹性布局

67.es6新特性
1.新的变量声明方式 let/const
2.箭头函数的使用
3.模板字符串
4.函数的参数默认值，可以给函数设置默认值
5.对象和数组解构

68.常见的几种SPA优化方式
减小入口文件体积（路由懒加载），静态资源本地缓存，开启GZip压缩，使用SSR

69.视口单位
css3中引入了一个新的单位vw/vh，与视图窗口有关，vw表示相对于视图窗口的宽度，vh表示相对于视图窗口高度，除了vw和vh外，还有vmin和vmax两个相关的单位。各个单位具体的含义如下：
vw相对于视窗的宽度，1vw等于视口宽度的1%，即视窗宽度是100vw
vh相对于视窗的高度，1vh等于视口高度的1%，即视窗高度是100vh
vmin  vw和vh中的较小值
vmax  vw和vh中的较大值

70.如何和mysql进行通信
71.路由的动态加载模块


72.介绍路由的History
前端路由有两种模式：hash模式和history模式
hash模式：这里的hash就是指url尾巴后的#号以及后面的字符。这里的#和css里的#是一个意思。hash也称作锚点，本身是用来做页面定位的，它可以使对应id的元素显示在可视区域内。
history模式：已有hash模式了，而且hash能兼容到ie8，history只能兼容到IE10。首先，hash本来是拿来做页面定位的，如果拿来做路有的话，原来的锚点功能就不能用了。其次，hash的传参是基于url的，如果要传递复杂的数据，会有体积的限制，而history模式，不仅可以在url里放参数，还可以将数据存放在一个特定的对象中。

73.常见Http请求头
HTTP消息头是指，在http的请求和响应消息中，协议头部分的那些组件。HTTP消息头是在，客户端请求（Request）或服务器响应（Response）时传递的，位于请求或响应的第一行，HTTP消息体（请求或响应的内容）是其后传输。
常见的HTTP请求头（Request Headers）：
协议头	说明	示例	状态
（1）Accept	可接受的响应内容类型（Content-Types）。	Accept: text/plain	固定
（2）Accept-Charset	可接受的字符集	Accept-Charset: utf-8	固定
（3）Accept-Encoding	可接受的响应内容的编码方式。	Accept-Encoding: gzip, deflate	固定
（4）Accept-Language	可接受的响应内容语言列表。	Accept-Language: en-US	固定
（5）Accept-Datetime	可接受的按照时间来表示的响应内容版本	Accept-Datetime: Sat, 26 Dec 2015 17:30:00 GMT	临时
（6）Authorization	用于表示HTTP协议中需要认证资源的认证信息	Authorization: Basic OSdjJGRpbjpvcGVuIANlc2SdDE==	固定
（7）Cache-Control	用来指定当前的请求/回复中的，是否使用缓存机制。	Cache-Control: no-cache	固定
（8）Connection	客户端（浏览器）想要优先使用的连接类型	Connection: keep-alive Connection: Upgrade	固定
（9）Cookie	由之前服务器通过Set-Cookie（见下文）设置的一个HTTP协议Cookie	Cookie: $Version=1; Skin=new;	固定：标准

常见的HTTP响应头（Response Headers）：
响应头	说明	示例	状态
（1）Access-Control-Allow-Origin	指定哪些网站可以跨域源资源共享	Access-Control-Allow-Origin: *	临时
（2）Accept-Patch	指定服务器所支持的文档补丁格式	Accept-Patch: text/example;charset=utf-8	固定
（3）Accept-Ranges	服务器所支持的内容范围	Accept-Ranges: bytes	固定
（4）Age	响应对象在代理缓存中存在的时间，以秒为单位	Age: 12	固定
（5）Allow	对于特定资源的有效动作;	Allow: GET, HEAD	固定
（6）Cache-Control	通知从服务器到客户端内的所有缓存机制，表示它们是否可以缓存这个对象及缓存有效时间。其单位为秒	Cache-Control: max-age=3600	固定
（7）Connection	针对该连接所预期的选项	Connection: close	固定


74.移动端适配1px的问题

75.flex布局相关问题
justify-content属性定义了项目在主轴上的对齐方式：
justify-content:flex-start | flex-end | center | space-between | space-around
align-items属性：flex-start,flex-end,center,baseline,stretch

76.watch和computed区别以及两者使用场景
1.区别：
watch需要在数据变化时执行异步或开销较大的操作时使用，对于任何复杂逻辑或一个数据属性在它所依赖的属性发生变化时，也要发生变化，这种情况下，我们最好使用计算属性 computed
computed 属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；
computed中的函数必须用return返回最终的结果
2.使用场景：
computed：当一个属性受到多个属性影响的时候就需要用到computed，如：购物车商品结算的时候
watch：当一条数据影响多条数据的时候就需要用watch，如：搜索数据

77.webpack性能优化
一：优化构建速度
（1）缩小文件的搜索范围
搜索过程优化方式包括：resolve字段告诉webpack怎么去搜索文件，所以首先重视resolve字段的配置：
1.1 设置resolve.modules:[path.resolve(__dirname,'node_modules')]避免层层查找
1.2 设置resolve.mainFields:['main'] 设置尽可能少的值可以减少入口文件的搜索步骤
1.3 对庞大的第三方模块设置resolve.alias,使webpack直接使用库的main文件，避免库内解析
1.4 合理配置resolve.extensions,减少文件查找
（2）使用DllPlugin减少基础模块编译次数
DllPlugin动态链接库插件，其原理是把网页依赖的基础模块抽离出来打包到dll文件中，当需要导入的模块存在于某个dll中时，这个模块不再被打包，而是去dll中获取。
（3）使用HappyPack开启多进程Loader转换
在整个构建流程中，最耗时的就是Loader对文件的转换操作。而运行在Node.js之上的Webpack是单线程模型的，也就是只能一个一个文件进行处理，不能并行处理。HappyPack可以将任务分解给多个子进程，最后将结果发给主进程。


78
1.jquery.when()方法，一个参数传递给$.when()被受理，执行回调函数。$.when()函数提供一种方法来执行一个或多个对象的回调函数。如果向jquery.when传入一个延迟对象，那么会返回它的promise对象(延迟方法的一个子集)。可以继续绑定Promise对象的其他方法，例如，defered.then。当延迟对象已被受理(resolved)或者被拒绝(rejected)，那么就会调用相应的回调函数。

79
1.原型链概念，以及原型链的应用
每一个对象都可以有一个原型_proto_，这个原型还可以有它自己的原型，以此类推，形成一个原型链。
（1）在js中，每个函数都有一个prototype属性，这个属性指向函数的原型对象。
原型的概念：每一个js对象创建的时候，就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型中“继承”属性
（2）__proto__，这是每个对象(除null外)都会有的属性，叫做__proto__，这个属性会指向该对象的原型。


80.es6新特性，箭头函数，this指向问题。以下是箭头函数的基本特点：
（1）箭头函数this为父作用域的this，不是调用时的this。箭头函数的this永远指向其父作用域，任何方法都改变不了，包括call，apply，bind。普通函数的this指向调用它的那个对象。
（2）箭头函数不能作为构造函数，不能使用new
（3）箭头函数没有argumens，caller，callee
（4）箭头函数通过call和apply调用，不会改变this指向，只会传入参数
（5）箭头函数没有原型属性
（6）箭头函数不能作为Generator函数，不能使用yield关键字
（7）箭头函数返回对象时，要加一个小括号
（8）箭头函数在ES6 class中声明的方法为实例方法，不是原型方法
（9）多重箭头函数就是一个高阶函数，相当于内嵌函数

81.promise
promise 的相关概念，all()方法，race()方法。Prepending(进行时)，Resolve(成功了)，Reject(失败了)
（1）Promise是异步编程的一种解决方案，比传统的解决方案-回调函数和事件-更合理和更强大。
（2）Promise.all()方法用于将多个Promise实例，包装成一个新的Promise实例。该方法接受一个数组作为参数，p1，p2，p3都是Promise实例。只有p1,p2,p3之中都变成fulfilled，p的状态才会变成fulfilled。只要p1,p2,p3之中有一个被rejected，p的状态就变成rejected。

82.闭包
闭包是指有权访问另一个函数作用域中变量的函数

83.webpack打包配置
webpack处理应用程序时，它会在内部构件一个依赖图，此依赖图会映射项目所需的每个模块，并生成一个或多个bundle
核心：
webpack的核心有四个：
1.entry入口：指示webpack应该使用哪个模块，来作为构件其内部依赖图的开始。进入入口起点后，webpack会找出有哪些模块和库是入口起点依赖的。默认值是./src/index.js
2.output输出：告诉webpack在哪里输出它所创建的bundle，以及如何命名这些文件。主要输出文件的默认值是./dist/main.js，其他生成文件默认放置在./dist 文件夹中
3.loader：webpack只能理解javascript和json文件。loader让webpack能够去处理其他类型的文件，并将它们转换为有效模块，以供应用程序使用，以及被添加到依赖图中
4.plugin插件：loader用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量


84.sass 与 less
sass与less都是css的拓展语言，less和sass主要区别是less是通过javascript编译，而sass是通过ruby编译的。

85.html5 适配 iphoneX，iphone11具有刘海屏手机
（1）首先，需要设置网页在可视窗口的布局方式
     <meta name="viewport" content="width=device-width,viewport-fit=cover" />
（2）根据媒体查询，做页面适配
   @media only screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3){
       .class{
			height:原来高度+34px
			padding-bottom: 34px
			// 即将原生的高度增加34px，用于适配刘海屏下方的小黑条
	   }
   } 

   
   
86.闭包和直接return的区别
1.直接return返回的是变量，闭包返回的是执行环境；
2.闭包不是为了让函数外部拿到内部变量。而是为了保护私有变量不被随意修改；
3.return 出来的是一个值，不是变量本身，此处的 return 是取得私有变量值的一种方法，跟闭包没有严格关系；
4.闭包作为一个可以访问函数内部变量的函数，更多的是可以在其中添加其他的条件，过滤无效的值。如果直接return 变量，然后赋值的话，还要在后续去判断这个值的有效性。

87.闭包的缺点
闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，ie浏览器会导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。
全局变量和局部变量生命周期是不相同的，全局变量存放在一个区域内，具有全局作用域；局部变量存放在堆栈中，由编译器自动分配释放。


88.html form表单提交注意的事项
1.每个input标签都要有name属性，form要有action和method
2.也可以使用button代替input作为提交的按钮，button的type属性有两个值:button和submit。当不写type属性时，其type的默认值是submit，点击的话也会直接提交数据
3.使用form的onsubmit()方法对表单数据进行验证后，再提交
